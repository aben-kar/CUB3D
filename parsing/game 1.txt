# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    game 1.txt                                         :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: achraf <achraf@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/09/29 16:45:00 by achraf            #+#    #+#              #
#    Updated: 2025/09/29 16:44:06 by achraf           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "cub3d.h"

void init_player(t_data *data)
{
    int i, j;
    
    // Find player position in map
    i = 0;
    while (data->map[i])
    {
        j = 0;
        while (data->map[i][j])
        {
            if (is_player(data->map[i][j]))
            {
                data->player.x = j + 0.5; // Center of the cell
                data->player.y = i + 0.5;
                
                // Set direction based on player character
                if (data->map[i][j] == 'N')
                {
                    data->player.dir_x = 0;
                    data->player.dir_y = -1;
                    data->player.plane_x = 0.66;
                    data->player.plane_y = 0;
                }
                else if (data->map[i][j] == 'S')
                {
                    data->player.dir_x = 0;
                    data->player.dir_y = 1;
                    data->player.plane_x = -0.66;
                    data->player.plane_y = 0;
                }
                else if (data->map[i][j] == 'E')
                {
                    data->player.dir_x = 1;
                    data->player.dir_y = 0;
                    data->player.plane_x = 0;
                    data->player.plane_y = 0.66;
                }
                else if (data->map[i][j] == 'W')
                {
                    data->player.dir_x = -1;
                    data->player.dir_y = 0;
                    data->player.plane_x = 0;
                    data->player.plane_y = -0.66;
                }
                
                data->player.move_speed = 0.05;
                data->player.rot_speed = 0.03;
                
                // Replace player with empty space
                data->map[i][j] = '0';
                return;
            }
            j++;
        }
        i++;
    }
}

void init_game(t_data *data)
{
    data->game.screen_width = SCREEN_WIDTH;
    data->game.screen_height = SCREEN_HEIGHT;
    
    data->game.mlx = mlx_init();
    if (!data->game.mlx)
        print_error_and_exit("Failed to initialize MLX");
    
    data->game.win = mlx_new_window(data->game.mlx, SCREEN_WIDTH, SCREEN_HEIGHT, "CUB3D");
    if (!data->game.win)
        print_error_and_exit("Failed to create window");
    
    data->game.img = mlx_new_image(data->game.mlx, SCREEN_WIDTH, SCREEN_HEIGHT);
    if (!data->game.img)
        print_error_and_exit("Failed to create image");
    
    data->game.addr = mlx_get_data_addr(data->game.img, &data->game.bits_per_pixel,
                                       &data->game.line_length, &data->game.endian);
    
    init_player(data);
}

int close_window(t_data *data)
{
    if (data->game.img)
        mlx_destroy_image(data->game.mlx, data->game.img);
    if (data->game.win)
        mlx_destroy_window(data->game.mlx, data->game.win);
    if (data->game.mlx)
        mlx_destroy_display(data->game.mlx);
    exit(0);
    return (0);
}

int key_press(int keycode, t_data *data)
{
    double old_dir_x, old_plane_x;
    
    if (keycode == KEY_ESC)
        close_window(data);
    
    // Movement
    if (keycode == KEY_W)
    {
        if (data->map[(int)(data->player.y)][(int)(data->player.x + data->player.dir_x * data->player.move_speed)] != '1')
            data->player.x += data->player.dir_x * data->player.move_speed;
        if (data->map[(int)(data->player.y + data->player.dir_y * data->player.move_speed)][(int)(data->player.x)] != '1')
            data->player.y += data->player.dir_y * data->player.move_speed;
    }
    if (keycode == KEY_S)
    {
        if (data->map[(int)(data->player.y)][(int)(data->player.x - data->player.dir_x * data->player.move_speed)] != '1')
            data->player.x -= data->player.dir_x * data->player.move_speed;
        if (data->map[(int)(data->player.y - data->player.dir_y * data->player.move_speed)][(int)(data->player.x)] != '1')
            data->player.y -= data->player.dir_y * data->player.move_speed;
    }
    if (keycode == KEY_A)
    {
        if (data->map[(int)(data->player.y)][(int)(data->player.x - data->player.plane_x * data->player.move_speed)] != '1')
            data->player.x -= data->player.plane_x * data->player.move_speed;
        if (data->map[(int)(data->player.y - data->player.plane_y * data->player.move_speed)][(int)(data->player.x)] != '1')
            data->player.y -= data->player.plane_y * data->player.move_speed;
    }
    if (keycode == KEY_D)
    {
        if (data->map[(int)(data->player.y)][(int)(data->player.x + data->player.plane_x * data->player.move_speed)] != '1')
            data->player.x += data->player.plane_x * data->player.move_speed;
        if (data->map[(int)(data->player.y + data->player.plane_y * data->player.move_speed)][(int)(data->player.x)] != '1')
            data->player.y += data->player.plane_y * data->player.move_speed;
    }
    
    // Rotation
    if (keycode == KEY_LEFT)
    {
        old_dir_x = data->player.dir_x;
        data->player.dir_x = data->player.dir_x * cos(-data->player.rot_speed) - data->player.dir_y * sin(-data->player.rot_speed);
        data->player.dir_y = old_dir_x * sin(-data->player.rot_speed) + data->player.dir_y * cos(-data->player.rot_speed);
        old_plane_x = data->player.plane_x;
        data->player.plane_x = data->player.plane_x * cos(-data->player.rot_speed) - data->player.plane_y * sin(-data->player.rot_speed);
        data->player.plane_y = old_plane_x * sin(-data->player.rot_speed) + data->player.plane_y * cos(-data->player.rot_speed);
    }
    if (keycode == KEY_RIGHT)
    {
        old_dir_x = data->player.dir_x;
        data->player.dir_x = data->player.dir_x * cos(data->player.rot_speed) - data->player.dir_y * sin(data->player.rot_speed);
        data->player.dir_y = old_dir_x * sin(data->player.rot_speed) + data->player.dir_y * cos(data->player.rot_speed);
        old_plane_x = data->player.plane_x;
        data->player.plane_x = data->player.plane_x * cos(data->player.rot_speed) - data->player.plane_y * sin(data->player.rot_speed);
        data->player.plane_y = old_plane_x * sin(data->player.rot_speed) + data->player.plane_y * cos(data->player.rot_speed);
    }
    
    render_frame(data);
    return (0);
}

void game_loop(t_data *data)
{
    render_frame(data);
    mlx_hook(data->game.win, 2, 1L<<0, key_press, data);
    mlx_hook(data->game.win, 17, 1L<<17, close_window, data);
    mlx_loop(data->game.mlx);
}